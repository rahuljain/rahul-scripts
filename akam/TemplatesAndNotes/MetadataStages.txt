The stage (or stages) at which a tag is used is listed in the table that accompanies each entry in this document. In the case of nodes, the main node element controls application of all tags within the node, so there is only one table at the node level.

This is also the sequence in which the various stages occur:

0. content-policy:
Applies to TAPOICA.
It's setup for 2 purposes:
 - if TAPOICA is used/turned for a policy
 - fetch the policy for the end user request.
It happens before client-request because cache key has already been established etc and so we want that to happen to before client-request.

1. client-request: 
As the request is received.


2. client-request-body: 
After the request has been received, if edgeservices:inspect-request-body (a subset of the Web Application Firewall functionality) is used, this occurs at the client-request-body stage.


3. ipa-response: 
After the response is received from the intermediate processing agent server.


4. cache-hit: 
After the object is loaded from cache and is sanity checked. This stage is for tags that are used only when there is a cache entry and before the request is forwarded toward the origin server. (For example: max-age and akamai-prefresh).


5. forward-start: 
Immediately before the Akamai server selects a forward server to connect to. This allows for selecting a parent server based on a transformed version of the client request (or information from ipa-response stage), rather than strictly on the basis of the client request as received. Note that very few metadata tags are available for use at this stage.


6. forward-request: 
Immediately before the server tries to connect to a forward server, or right after it has decided to reuse a pconn. The important aspect of this stage is that the Akamai server has determined the type of server to which it will go forward, and can apply metadata based that information.


7. forward-response: 
After the object is received from the origin server and the response headers are successfully parsed. This stage is only for those tags that are used after we fetch the object from the origin server and before the object is made available to other client requests. (For example: bypass-cache). Note that this means the metadata is applied only in the case that we go to the origin server, not if we serve from cache without a forward request.


8. client-response: 
Before we construct the reply for the client. This stage is only for tags used after the response object is made available to other client requests. (For example: set-cookie, set-unique-cookie and other tags that modify the response the individual client will receive.)
ï¿¼

9. client-done: 
Immediately after serving the client. This stage is only for receipt requests, where we can send a receipt based on the status code and other attributes of client-completion matches.
